Funciones
=====================================
author: Felipe Sodré Mendes Barros
date: 11/11/2018
autosize: true

e-mail: felipe.b4rros@gmail.com

Programa
========================================================
  
1. Funciones;  
1. Condicionales;  
1. loop;
```{r}
library(tidyverse)
```

Motivación
========================================================
La posibilidad que crear nuevas funciones nos permite automatizar operaciones que sean rutina en nuestras actividades de análisis de datos, que muchas veces son realizadas con copia y pega de codigos.  
Las ventajas en se trabajar con funciones son:  
  
1. Se resume actividades a una función con un nombre que resulta mas facil el entendimiento de lo que se está haciendo;  
1. Caso haga falta cambiar algo el la rutina, basta cambiar una o otra cosa de la función y ejecutarla nuevamente;  
1. Se reduce las chances de errores con la copia/pega de varias trechos de datos;  

`r emo::ji("warning")` Considere crear una funcrión siempre que perciba la necesidad de copiar/pegar un trecho de codigo más de dos veces...

Estrucutra
=========================================================

```{r, eval=FALSE}
function.name <- function(arguments) 
{
  computations on the arguments
  some other code
}
```

Standart error
=======================================================
como ejemplo practico, vamos crear una función que calcule el error standart:  
$\sqrt{\mathrm{var}(x)/n}$  
Para eso, vamos ocupar los datos de animales herbívoros:
```{r}
datos <- read_csv("./datos/seed_root_herbivores.csv")
```

Standart error (cont.)
=======================================================
Caso vayamos calcular el error standart del tamaño de los animales, haríamos:  
  
$\sqrt{\mathrm{var}(x)/n}$  
```{r}
datosVar <- var(datos$Height)
numObs <- length(datos$Height)
sqrt(datosVar/numObs)
```

Standart error (cont. II)
=======================================================
 Perciba que repetimos `datos$Height` dos veces...
Y además de eso, supongamos que necesitamos ejecutar ese mismo calculo para otras variables.  
Como podríamos transformar ese comando en una función?  
Antes de crear la función, vale identificar:  
  
- El comando a ser transofrmado necesita cuantos/cuales variables?
- Que calculo necesitamos hacer para llegar al resutado deseado?

Creando funcion Standart error
=======================================================
  
- Para el calculo del stadart error necesitamos de un único conjunto de valores numericos;
- A este conjunto de datos, calculamos la variancia `var()`;  
- Identificamos la cantidad de observaciones `length`;  
- Y hacemos el calculo de standart error;  
```{r, eval=FALSE}
standart.error <- function(x){
  datosVar <- var(x)
  numObs <- length(x)
  result <- sqrt(datosVar/numObs)
  return(result)
}
# ejecutando la función
standart.error(datos$Weight)
```

Ambiente de la función
=======================================================
Perciba que en la función, creamos dos variables (datosVar y numObs). Perciba que dichas variables no son incorpoaradas al ambiente global de su proyecto ( “global environment”).
  
Eso por que las funciones poseen su proprio ambiente que, por a su vez son destruidos al termino de la función.  
  
Caso tengas una variable `datosVar` en su *global environment*, el mismo será ignorado por el mismo motivo.

Ejercício I
=======================================================
Porque la función abajo resulta en error?
Que tenemos que cambiar para que sea bien ejecutada?
```{r, eval=FALSE}
standart.error(y = datos$Weight)
```
Ejercício II
=======================================================
  
- Cual es la relación entre standart error de Weight y Height, al agrupar los valores por Plot, See.herbivore y Root.herbivore?
- crea un boxplot del mismo resutado, diferenciando Weight y Height según la situación de Seed.herbivore y Root.herbivore;
```{r, eval=FALSE, echo=FALSE}
se <- datos %>% 
  group_by(Plot, Seed.herbivore, Root.herbivore) %>% 
  summarise(se.Height = standart.error(Height), se.Weight = standart.error(Weight))

ggplot(se, aes(x = se.Height, y = se.Weight)) +
  geom_point()

ggplot(se, aes(x=Seed.herbivore, y=se.Height)) + 
  geom_boxplot() + 
  facet_wrap(~ Root.herbivore)
```

Buens practicas con funciones
========================================================
La idea de crear funciones es poder ocuparlas otras veces y por eso las misma deben ser desarrolladas de forma independiente del proyecto en que se esta trabajando.  
  
Una sugerencia es crear un archivo .R para armazenar todas las funciones creadas (claro, se debe diferenciar por temas y etc).  
De esa forma se puede accederla de forma independente en otros proyectos, ejecutando el codigo:
```{r, eval=FALSE}
source("~/camino_al_archivo/funcitones.R")
```

Condicionales
========================================================
Para añadir en su codigo testes y condiciones, se utiliza las funciones **if()** y **else**;  
  
`r emo::ji("warning")` Perciba que el resultado del teste hay que ser **si o si** **logico** (TRUE o FALSE)

```{r, eval=FALSE}
if (condition) {
  # code executed when condition is TRUE
} else {
  # code executed when condition is FALSE
}
```
Condicionales else if
========================================================
Caso sea necesario trabajar con mas de una condición, se puede usar la función **else if()**:
```{r, eval=FALSE}
if (this) {
  # haga algo
} else if (that) {
  # haga otra cosa
} else {
  # haga otra cosa II
}
```

Condicionales y NA
========================================================
  
- La condicional abajo anda bien? caso haga falata, cambie lo necesario. 
```{r, eval=FALSE}
val <- NA
if(val){
  print("OK")
}
```

Ejercício III
========================================================
A apartir del codigo abajo, idenitifique lo que ellos hacen y como podríamos nombrarlos.
```{r, eval=FALSE}
f1 <- function(x) {
  if (length(x) <= 1) return(NULL)
  x[-length(x)]
}

f2 <- function(x, y) {
  rep(y, x)
}
```

Ejercícios IV
=======================================================
Crea una función que diga "buen día", "Buenas tardes" y "Buenas noches" acuerdo a la hora del día en que la función sea ejecutada. (Suhjerencia: crea un parametro para la hora y deje por defecto el resultado de la función lubridate::now().
```{r, eval=FALSE, echo=FALSE}
teste <- function(hora = lubridate::now()){
  if(hora<12){
    print("Buen día!")
  } else if(hora>12 & hora<19){
    print("buenas tardes!")
  } else{
    print("Buenas noches!")
  }
}
teste()
```

loop
=======================================================
Vamos suponer que necesitamos saber la mediana de los valores de las columnas **No.stems**, **Height**, **Weight**, **Seed.heads** de los datos que estuvimos trabajando.  
Una forma de hacer eso, sería usarndo un "for loop".  
En R, un loop se crea de la seguinte forma:
```{r, eval = FALSE}
output <- vector("double", ncol(datosReducidos))  # 1. objeto de salida 
# opcional pero muy importante: para armazenar el resultado a cada iteración
for (i in 1:10) {            # 2. secuencia
  output[[i]] <- i * i      # 3. cuerpo: que hacer en el loop
}
output
```
Loop sugerencias
=======================================================
Hoy en día ya no se recomienda más usar loop, ya que hay otras herramientas mas optmizadas para ejecutar la misma tarea (realizar una iteración);  
  
Pero de cualquier forma, el loop sigue siendo una herramienta facil y practica de usar.  
Algunas sugerencias para desarrollar un loop son:
  
1. Probar el indice antes de ejecutar;
1. Certificarse que no ha creado un loop infinito;
1. usar el print() para certificarse de los resultados mientras el loop esta ejecutando
1. certificarse que el objeto (si necesario) que va recibir el resultado no esta sobrescribiendo el valor anterior.  
```{r}
NombrePlot <- NULL
for (i in unique(datos$Plot)){
  # i = unique(datos$Plot)[1]
  print(i)
  NombrePlot <- i
}
NombrePlot
```

Loop: Ejercício V
===============================================================
  
1. Crea un for loop para calcular el promedio de cada columns del conjunto de datos mtcars.
1. Crea un loop que permite leer cada archivo .csv existente en la carpeta ./datos y agregalo a un objeto data.frame creado antes. Sugerencia, considerar este comando antes de empezar: 
```{r, eval=FALSE}
files <- dir("datos", pattern = ".csv$", full.names = TRUE)
output <- data.frame()
```
```{r, eval=FALSE, echo=FALSE}
for(i in seq_along(mtcars)){
  # i=1
  print(mean(mtcars[[i]]))
}

files <- dir("datos", pattern = ".csv$", full.names = TRUE)
output <- data.frame()
for( i in seq_along(files)){
  # i=2
  print(files[i])
  datoCargado <- read.csv(files[i])
  output <- rbind(output, datoCargado)
}
```