Datos relacionales
=====================================
author: Felipe Sodré Mendes Barros
date: 06/11/2018
autosize: true

e-mail: felipe.b4rros@gmail.com

Programa
========================================================
Es muy común en el universo de análisis de datos, trabajar con datos que en realidad están compuestos de dos o más tablas de forma que dichas se relacionen;  
A estos datos, llamamos de datos relacionales y son muy comunes al tabajar con Sistemas de Base de Datos;  
![](./img/relational-nycflights.png)

Datos relacionales
===========================================================
Para estos casos existen funciones específicas para trabajar los datos:
  
1. **Mutating joins**, los cuales adicionan nuevas variables a un data.frame a partir de un campo correspondiente (Identificador único/ID/key) en ambas planillas;  
1. **Filtering joins**, filtran observaciones de un data.frame basado en el hecho de haber una otra observación corespondiente en otra tabla.
1. **Set operations**, **POR HACER** which treat observations as if they were set elements.

Paquetes
=============================================================
Vamos usar los datos de vuelos novamente. El paquete *nycflights13* posee cuatro tablas que pueden ser relacionadas a partir de un identificador unico (ID/key);  
  
El paquete *tidyverse* en realidad instala y carga todas las librerias que estuvimos usando: *ggplot2*, *tibble*, *tidyr*, etc.
```{r}
# install.packages('tidyverse')
library(tidyverse)
library(nycflights13)
```

Ejercício I
=================================================================
Mire las tablas:
  
- airlines;
- airports;
- planes;
- weather;
  
Y busque identificar como podrías relacionar dichar tablas con la tabla *flights*?

Diagrama de relaciones
================================================================
Volviendo a la imagen de la primera filmina, que nos presente un **diagrama de relaciones**, lo podemos interpretar:  
  
- **flights** se relaciona con **planes** por una variable: la **tailnum**;
- **flights** se relaciona con **airlines** a partir de la variable **carrier**;  
- **flights** se relaciona con **airports** de dos formas: 
    - por la variable **origin**;
    - y por la variable **dest**;  
- **flights** se relaciona con **weather** por:  
    - la variable **origin** (the location);
    - **year**, **month**, **day** and **hour**; (todas juntas)
    
Keys
===========================================================
Las variables de identificación unica, tabién son llamadas de **key**, y generalmente si diferencia entre:
  
- **Primary key**: que es la variable de identificación única en la tabla de observaciones (o principal). Ej.: `planes$tailnum`;
- **Foreing Key**: es la variable de identificaicón única presente en otra tabla, permitiendo hacer a relación entre las observaciones. Ej.: `flights$tailnum`

Ejercício II
=============================================================
La idea de la **llave primaria** es identificar unicamente una observación.  
  
1. Confirme si la tabla `planes` posee mas de una observación con el mismo valor de su llave primaria;
1. Cual sería la variable o las variables de identificación unica de la tabla `flights`?
1. Dibuje un diagrama de relaciones de la tabla `diamonds` (disponible en el paquete ggplot2); Se trata de una planilla única pero se podría dividir en distintas planillas relacionales. Como sería eso?
```{r, eval=FALSE, echo=FALSE}
planes %>% 
  count(tailnum) %>% 
  filter(n>1)
```

Mutating join
================================================================
Mutating join agregará al fin de la tabla (data.frame) variables de otra tabla, a partir de una variable llave.  
  
`r emo::ji("warning")`Pero hay distintas ofrmas de hace dicho "join".
  
Vamos ver algunos ejemplos:  
`r emo::ji("warning")`En color están las variables llave y en gris sus valores.

inner_join()
==================================================================
**inner_join()** es la forma de join mas simples y irá retornar las observaciones siempre que las variables llave se emparejen;
  
`r emo::ji("warning")` Las observaciones que no emparejan son excluidas del resultado final. `r emo::ji("warning")`  
Por eso, no es un tipo de fusión recomendad ya que se hace facil perder observaciones (y los desavisados suelen no percibir).  
```{r}
flights %>% 
  select(year:day, hour, tailnum, carrier) %>% 
  inner_join(airlines, by = "carrier") # el parametro by indica la variable llave
```

outer join
==================================================================
Son  tipos de "join" que mantinen las observaciones de una de las tablas. Hay distintas funciones de este tipo:
  
- **left_join()**: Mantiene todas las observaciones de la tabla a a izquierda de lafunción join (`x`). Y caso no haja observación respectiva en otra tabla, la observación quedará con `NA`;
- **right_join()**: Mantiene todas las observaciones de la tabla a la derecha de la función (`y`). Y caso no haja observación respectiva en `X`, la observación quedará con `NA`;
- **full_join()**: Mantiene todas las observaciones de ambas tablas (`x` e `y`). Y caso no haja observación respectiva en otra tabla, la observación quedará con `NA`;

Ejemplos
==================================================================
Vamos suponer que necesitamos agregar en todas las observaciones de **flights** el nombre de la compañia aerea (**carrier**). Para eso, podríamos hacer:
```{r}
flights %>% 
  select(year:day, hour, tailnum, carrier) %>% 
    left_join(airlines, by = "carrier")
```

Ejercicio III
==================================================================

1. Agregar la velocidad (**speed**) de la aeronave (**planes**) en la tabla flights?
1. Crea un grafico de baras para visualizar la proporción de vuelos por mes según en tipo de motor (**engine**), sin perder datos de vuelos;

```{r, eval=FALSE, echo=FALSE}
flights %>% 
  select(year:day, hour, tailnum, carrier) %>% 
    left_join(planes, by = "tailnum")

flights %>% 
  select(year:day, hour, tailnum, carrier) %>% 
    right_join(planes, by = "tailnum") %>% 
  ggplot(aes(x=as.factor(month), fill = engine)) +
  geom_bar()

```

Resumen
==================================================================
![](./img/join-venn.png)

Definiendo multiples variables llave
==================================================================
Hasta ahora estuvimos trabajando con variables únicas. Pero as veces necesitamos juntar mas de una variable, como ocurre con la tabla **weather**.
  
Para lograr conocer la condición meteorológica en la origen del vuelo, tendríamos que unir con **flights** usando las variables **year**, **month**, **day**, **hour**, **origin**.
```{r}
flights %>% 
  select(year:day, hour, origin, carrier, origin, dest) %>% 
  left_join(weather, c("year", "month", "day", "hour", "origin"))
```

Definiendo multiples variables llave II
==================================================================
`r emo::ji("warning")` Por defecto, el parametro "by = NULL" hará la junción de las tablas a partir de las variables que ocurran en ambas. Tornando esa tarea mucho mas facil `r emo::ji("+1")`  
A eso llamamos de **join natural**;
```{r}
flights %>% 
  select(year:day, hour, origin, carrier, origin, dest) %>% 
  left_join(weather)
```

Ejercicio IV
==================================================================
  
1. Como podríamos visualmente analisar si hay corelación entre retraso de salida (**dep_time**) con:
    - velocidad del viento (**wind_speed**)
    - velocidad del viento (**precip**)
```{r, eval=FALSE, echo=FALSE}
flights %>% 
  select(year:day, hour, origin, carrier, origin, dest, dep_delay) %>% 
  left_join(weather) %>% 
  ggplot(aes(x=dep_delay, y = wind_speed)) + 
  geom_point()

flights %>% 
  select(year:day, hour, origin, carrier, origin, dest, dep_delay) %>% 
  left_join(weather) %>% 
  ggplot(aes(x=dep_delay, y = precip)) + 
  geom_point()
```
Cuidado! `r emo::ji("warning")`
================================================================
No abuse del **join natural**. Muchas veces las tablas poseen variables con mismo nombre pero con significados distintos!  
  
- Ej.: **planes** y **flights** poseen una variable llamda **year**. Pero en **planes** se refire al año de fabricación, mientras en flights, año del vuelo.  
  
Otro problema común es cuando las variables llave están nombradas de forma distintas en las tablas.
  
- Ej: **airports**, posee la variable "dest" mientras la tble **flights** posee la variable  "faa". Pero ambas significan lo mismo y se tratan de variable llave.  
  
Para unir dichas tablas, podríamos usar:
```{r}
flights %>% 
    left_join(airports, c("dest" = "faa"))
```

Filter join
================================================================
Filtering join empareja las tablas de la misma forma, pero, altera las observaciones y no las variables.  

Hay dos funciones para eso:  
  
- **semi_join()**: mantiene todas las observaciones de x que esteen en y;  
- **anti_join()**: remove todas las observaciones de x que esteen en y;  

semi_join()
================================================================
 
Ej.: Vamos crear un objecto de los diez destinos mas visitados.  
A partir de estos aeropuertos queremos saber:
  - Cuales vuelos tuvieron como destino algún de estos aeropuertos:
```{r, eval=FALSE}
top_dest <- flights %>%
  count(dest, sort = TRUE) %>%
  head(10)

flights %>% 
  select(year:dep_time, dest, origin) %>% 
  semi_join(top_dest)
```

anti_join()
================================================================
Ahora vamos soponer que queremos conocer los vuelos que no tuvieron como destino ningún de los aeropuertos listados en *top_dest*.
```{r}
flights %>% 
  select(year:dep_time, dest, origin) %>%
  anti_join(top_dest)
```

Ejercícios V
================================================================
  
1. Cuales vuelos fueron hechos con aeronaves que tengan más de cien vuelos?
1. Que dicen los codigos abajo:

```{r, eval=FALSE}
anti_join(flights, airports, by = c("dest" = "faa"))

anti_join(airports, flights, by = c("faa" = "dest"))
```